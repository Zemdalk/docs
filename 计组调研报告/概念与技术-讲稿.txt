大家好，我们小组这次汇报的主题是：容器化技术发展历程及其应用。本次汇报由我来负责讲解容器化的概念以及相关的技术，由李家驹同学汇报调研到的容器化技术发展历程，由全施雨同学汇报容器化技术的应用。下面进入第一部分，容器化的概念与相关技术。【翻页】

容器化技术是什么呢？从Docker的官方网站上我们可以看到这样的定义【左下角的英文定义】：容器是一个标准的软件单元，它将代码及其所有的依赖关系打包，以便应用程序在一个计算环境中快速、可靠地运行。也就是说【右上角的英文说明】，在容器内运行的程序只能看到容器的内容和接入容器的设备。

谈到容器化技术，人们最常联系对比的就是虚拟机【翻页】，虚拟机技术和容器化技术的原理分别如左右图所示，可以看到，二者最明显的不同就是虚拟机技术在主机的操作系统上又虚拟了一个完整的操作系统，而容器仅仅是打包了一个应用及其依赖项、配置环境参数等。【翻页】这就带来了容器的几大特点。首先是轻量化，虚拟机可能占用主机的大量系统资源，大小为几GB，而容器就只占几百MB，甚至可以小到10MB。其次，容器部署快，容器内的应用部署速度可达到秒级甚至毫秒级。容器还易于移植，在一台机器上运行的程序很容易就可以到另一台机器上运行，而不用重新配一次环境等等。最后，容器还能做到弹性伸缩，可以根据需求自动调整分配的资源量，可以避免闲时资源的过多闲置。【翻页】

下面让我们来看一下与虚拟机相关的技术和工具，【翻页】首先是Namespace和Cgroups，Namespace是一种隔离策略，最早应用在Linux内核中，将内核资源分区，不同Namespace下的进程会看到不同的资源。Linux内核中有许多不同类型的Namespace，它们各有其功能特性，比如右图就是一种Namespace，称为Process ID Namespace。使用Namespace的好处包括可以缩小变化带来的爆炸半径，可以理解为一个进程运行时的故障或者参数改变等等不会影响到其它进程，另一个就是它符合微服务的一种架构，这个在稍后的应用部分还会谈到。【翻页】另一种技术是Cgroups，它最初也是应用在Linux内核中，作用就是分配和控制被隔离的不同进程所占有的资源量。这两种技术是现代容器的构建模块。

既然谈到容器，就离不开这项工具。2013年，一项容器创建工具诞生，它的影响是如此之大，以至于现在很多人一谈到容器，第一反应就是它，它就是Docker。【翻页】Docker 是一组平台即服务产品，它使用操作系统级别的虚拟化，在称为容器的包中交付软件。我想从两个方面来简单介绍一下Docker，一个是它的两句口号，Build, ship, and run以及Build once, run anywhere。这两句话是什么意思呢？【翻页】举个例子来说明一下。假设你来到了一片空地，你有建造屋子的图纸，你就找来一堆木材、砖块、玻璃等等，建起来了一座房子。现在你去到了一个新的地方，那也要按照图纸，重新找来各种材料来建造一座一模一样房子。

但这个时候，你忽然有了一个特异功能，【点一下，动画】你可以把原来的房子做成一个叫做“镜像”的东西，然后放到背包里，去到一个新的地方后再直接用镜像映照出跟原来一模一样的房子，这就省去了建造的精力。这就是第一句口号，“搭建，发送，运行”的含义。【点一下，动画】那我有了镜像，我可以走四方，到任何地方歇脚的时候都能很方便地建一座房子，都跟原来的房子一样，这就是第二句话“一次搭建，到处运行”的含义。【点一下，动画】那事实上我们的背包里可以放很多个不同种类的这样的镜像，可以有海绵宝宝的菠萝屋、灰太郎的狼堡等等，这就给我们“造房子”带来了极大的便利。【翻页】

Docker的三大核心概念，镜像、容器和仓库，也就在上面这个例子中体现出来了。镜像不必多说，容器是我们根据镜像自动创建出来的“房子”，而仓库里面就存放了各种各样的镜像，供我们按需随时取用。

好了，Docker大概就说这么多，我最后谈一下Kubernetes，它是容器的集群管理平台，简单理解就是好多个容器在Kubernetes的指挥下协调配合。一个Kubernetes系统被称为一个Kubernetes集群，它由一个Master节点和许多个Node节点组成，其中Master节点主要还是负责管理和控制。Node节点是工作负载节点，里面是具体的容器。具体层次关系如这页PPT所示。

我的部分就到这里，下面李家驹同学将带来容器化技术的发展历程。
